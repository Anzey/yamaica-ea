/**
 */
package xmei.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import xmei.util.XmeiAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class XmeiItemProviderAdapterFactory extends XmeiAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public XmeiItemProviderAdapterFactory()
    {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.AttributeContainmentType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AttributeContainmentTypeItemProvider attributeContainmentTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.AttributeContainmentType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAttributeContainmentTypeAdapter()
    {
        if (attributeContainmentTypeItemProvider == null)
        {
            attributeContainmentTypeItemProvider = new AttributeContainmentTypeItemProvider(this);
        }

        return attributeContainmentTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.AttributeModelType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AttributeModelTypeItemProvider attributeModelTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.AttributeModelType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAttributeModelTypeAdapter()
    {
        if (attributeModelTypeItemProvider == null)
        {
            attributeModelTypeItemProvider = new AttributeModelTypeItemProvider(this);
        }

        return attributeModelTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.AttributePropertiesType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AttributePropertiesTypeItemProvider attributePropertiesTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.AttributePropertiesType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAttributePropertiesTypeAdapter()
    {
        if (attributePropertiesTypeItemProvider == null)
        {
            attributePropertiesTypeItemProvider = new AttributePropertiesTypeItemProvider(this);
        }

        return attributePropertiesTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.AttributesType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AttributesTypeItemProvider attributesTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.AttributesType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAttributesTypeAdapter()
    {
        if (attributesTypeItemProvider == null)
        {
            attributesTypeItemProvider = new AttributesTypeItemProvider(this);
        }

        return attributesTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.AttributeType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AttributeTypeItemProvider attributeTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.AttributeType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAttributeTypeAdapter()
    {
        if (attributeTypeItemProvider == null)
        {
            attributeTypeItemProvider = new AttributeTypeItemProvider(this);
        }

        return attributeTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.BoundsType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected BoundsTypeItemProvider boundsTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.BoundsType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createBoundsTypeAdapter()
    {
        if (boundsTypeItemProvider == null)
        {
            boundsTypeItemProvider = new BoundsTypeItemProvider(this);
        }

        return boundsTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.CodeType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CodeTypeItemProvider codeTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.CodeType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCodeTypeAdapter()
    {
        if (codeTypeItemProvider == null)
        {
            codeTypeItemProvider = new CodeTypeItemProvider(this);
        }

        return codeTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.ConcreteLinkType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConcreteLinkTypeItemProvider concreteLinkTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.ConcreteLinkType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConcreteLinkTypeAdapter()
    {
        if (concreteLinkTypeItemProvider == null)
        {
            concreteLinkTypeItemProvider = new ConcreteLinkTypeItemProvider(this);
        }

        return concreteLinkTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.ConnectorAppearanceType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConnectorAppearanceTypeItemProvider connectorAppearanceTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.ConnectorAppearanceType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConnectorAppearanceTypeAdapter()
    {
        if (connectorAppearanceTypeItemProvider == null)
        {
            connectorAppearanceTypeItemProvider = new ConnectorAppearanceTypeItemProvider(this);
        }

        return connectorAppearanceTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.ConnectorLabelsType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConnectorLabelsTypeItemProvider connectorLabelsTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.ConnectorLabelsType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConnectorLabelsTypeAdapter()
    {
        if (connectorLabelsTypeItemProvider == null)
        {
            connectorLabelsTypeItemProvider = new ConnectorLabelsTypeItemProvider(this);
        }

        return connectorLabelsTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.ConnectorModelType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConnectorModelTypeItemProvider connectorModelTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.ConnectorModelType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConnectorModelTypeAdapter()
    {
        if (connectorModelTypeItemProvider == null)
        {
            connectorModelTypeItemProvider = new ConnectorModelTypeItemProvider(this);
        }

        return connectorModelTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.ConnectorModifiersType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConnectorModifiersTypeItemProvider connectorModifiersTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.ConnectorModifiersType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConnectorModifiersTypeAdapter()
    {
        if (connectorModifiersTypeItemProvider == null)
        {
            connectorModifiersTypeItemProvider = new ConnectorModifiersTypeItemProvider(this);
        }

        return connectorModifiersTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.ConnectorPropertiesType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConnectorPropertiesTypeItemProvider connectorPropertiesTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.ConnectorPropertiesType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConnectorPropertiesTypeAdapter()
    {
        if (connectorPropertiesTypeItemProvider == null)
        {
            connectorPropertiesTypeItemProvider = new ConnectorPropertiesTypeItemProvider(this);
        }

        return connectorPropertiesTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.ConnectorsType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConnectorsTypeItemProvider connectorsTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.ConnectorsType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConnectorsTypeAdapter()
    {
        if (connectorsTypeItemProvider == null)
        {
            connectorsTypeItemProvider = new ConnectorsTypeItemProvider(this);
        }

        return connectorsTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.ConnectorType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ConnectorTypeItemProvider connectorTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.ConnectorType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createConnectorTypeAdapter()
    {
        if (connectorTypeItemProvider == null)
        {
            connectorTypeItemProvider = new ConnectorTypeItemProvider(this);
        }

        return connectorTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.DiagramElementsType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DiagramElementsTypeItemProvider diagramElementsTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.DiagramElementsType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDiagramElementsTypeAdapter()
    {
        if (diagramElementsTypeItemProvider == null)
        {
            diagramElementsTypeItemProvider = new DiagramElementsTypeItemProvider(this);
        }

        return diagramElementsTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.DiagramElementType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DiagramElementTypeItemProvider diagramElementTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.DiagramElementType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDiagramElementTypeAdapter()
    {
        if (diagramElementTypeItemProvider == null)
        {
            diagramElementTypeItemProvider = new DiagramElementTypeItemProvider(this);
        }

        return diagramElementTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.DiagramModelType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DiagramModelTypeItemProvider diagramModelTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.DiagramModelType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDiagramModelTypeAdapter()
    {
        if (diagramModelTypeItemProvider == null)
        {
            diagramModelTypeItemProvider = new DiagramModelTypeItemProvider(this);
        }

        return diagramModelTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.DiagramPropertiesType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DiagramPropertiesTypeItemProvider diagramPropertiesTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.DiagramPropertiesType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDiagramPropertiesTypeAdapter()
    {
        if (diagramPropertiesTypeItemProvider == null)
        {
            diagramPropertiesTypeItemProvider = new DiagramPropertiesTypeItemProvider(this);
        }

        return diagramPropertiesTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.DiagramsType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DiagramsTypeItemProvider diagramsTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.DiagramsType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDiagramsTypeAdapter()
    {
        if (diagramsTypeItemProvider == null)
        {
            diagramsTypeItemProvider = new DiagramsTypeItemProvider(this);
        }

        return diagramsTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.DiagramType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DiagramTypeItemProvider diagramTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.DiagramType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDiagramTypeAdapter()
    {
        if (diagramTypeItemProvider == null)
        {
            diagramTypeItemProvider = new DiagramTypeItemProvider(this);
        }

        return diagramTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.Documentation} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DocumentationItemProvider documentationItemProvider;

    /**
     * This creates an adapter for a {@link xmei.Documentation}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDocumentationAdapter()
    {
        if (documentationItemProvider == null)
        {
            documentationItemProvider = new DocumentationItemProvider(this);
        }

        return documentationItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.DocumentationType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DocumentationTypeItemProvider documentationTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.DocumentationType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDocumentationTypeAdapter()
    {
        if (documentationTypeItemProvider == null)
        {
            documentationTypeItemProvider = new DocumentationTypeItemProvider(this);
        }

        return documentationTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.ElementsType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ElementsTypeItemProvider elementsTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.ElementsType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createElementsTypeAdapter()
    {
        if (elementsTypeItemProvider == null)
        {
            elementsTypeItemProvider = new ElementsTypeItemProvider(this);
        }

        return elementsTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.ElementType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ElementTypeItemProvider elementTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.ElementType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createElementTypeAdapter()
    {
        if (elementTypeItemProvider == null)
        {
            elementTypeItemProvider = new ElementTypeItemProvider(this);
        }

        return elementTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.ExtendedPropertiesType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ExtendedPropertiesTypeItemProvider extendedPropertiesTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.ExtendedPropertiesType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createExtendedPropertiesTypeAdapter()
    {
        if (extendedPropertiesTypeItemProvider == null)
        {
            extendedPropertiesTypeItemProvider = new ExtendedPropertiesTypeItemProvider(this);
        }

        return extendedPropertiesTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.Extension} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ExtensionItemProvider extensionItemProvider;

    /**
     * This creates an adapter for a {@link xmei.Extension}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createExtensionAdapter()
    {
        if (extensionItemProvider == null)
        {
            extensionItemProvider = new ExtensionItemProvider(this);
        }

        return extensionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.InitialType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected InitialTypeItemProvider initialTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.InitialType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createInitialTypeAdapter()
    {
        if (initialTypeItemProvider == null)
        {
            initialTypeItemProvider = new InitialTypeItemProvider(this);
        }

        return initialTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.LinksType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LinksTypeItemProvider linksTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.LinksType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLinksTypeAdapter()
    {
        if (linksTypeItemProvider == null)
        {
            linksTypeItemProvider = new LinksTypeItemProvider(this);
        }

        return linksTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.ModelType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ModelTypeItemProvider modelTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.ModelType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createModelTypeAdapter()
    {
        if (modelTypeItemProvider == null)
        {
            modelTypeItemProvider = new ModelTypeItemProvider(this);
        }

        return modelTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.OperationParametersType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OperationParametersTypeItemProvider operationParametersTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.OperationParametersType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOperationParametersTypeAdapter()
    {
        if (operationParametersTypeItemProvider == null)
        {
            operationParametersTypeItemProvider = new OperationParametersTypeItemProvider(this);
        }

        return operationParametersTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.OperationPropertiesType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OperationPropertiesTypeItemProvider operationPropertiesTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.OperationPropertiesType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOperationPropertiesTypeAdapter()
    {
        if (operationPropertiesTypeItemProvider == null)
        {
            operationPropertiesTypeItemProvider = new OperationPropertiesTypeItemProvider(this);
        }

        return operationPropertiesTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.OperationsType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OperationsTypeItemProvider operationsTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.OperationsType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOperationsTypeAdapter()
    {
        if (operationsTypeItemProvider == null)
        {
            operationsTypeItemProvider = new OperationsTypeItemProvider(this);
        }

        return operationsTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.OperationTagsType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OperationTagsTypeItemProvider operationTagsTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.OperationTagsType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOperationTagsTypeAdapter()
    {
        if (operationTagsTypeItemProvider == null)
        {
            operationTagsTypeItemProvider = new OperationTagsTypeItemProvider(this);
        }

        return operationTagsTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.OperationType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OperationTypeItemProvider operationTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.OperationType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOperationTypeAdapter()
    {
        if (operationTypeItemProvider == null)
        {
            operationTypeItemProvider = new OperationTypeItemProvider(this);
        }

        return operationTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.OperationTypeType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OperationTypeTypeItemProvider operationTypeTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.OperationTypeType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOperationTypeTypeAdapter()
    {
        if (operationTypeTypeItemProvider == null)
        {
            operationTypeTypeItemProvider = new OperationTypeTypeItemProvider(this);
        }

        return operationTypeTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.ParameterPropertiesType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ParameterPropertiesTypeItemProvider parameterPropertiesTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.ParameterPropertiesType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createParameterPropertiesTypeAdapter()
    {
        if (parameterPropertiesTypeItemProvider == null)
        {
            parameterPropertiesTypeItemProvider = new ParameterPropertiesTypeItemProvider(this);
        }

        return parameterPropertiesTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.ParameterType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ParameterTypeItemProvider parameterTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.ParameterType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createParameterTypeAdapter()
    {
        if (parameterTypeItemProvider == null)
        {
            parameterTypeItemProvider = new ParameterTypeItemProvider(this);
        }

        return parameterTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.PrimitiveTypesType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PrimitiveTypesTypeItemProvider primitiveTypesTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.PrimitiveTypesType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPrimitiveTypesTypeAdapter()
    {
        if (primitiveTypesTypeItemProvider == null)
        {
            primitiveTypesTypeItemProvider = new PrimitiveTypesTypeItemProvider(this);
        }

        return primitiveTypesTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.ProjectType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ProjectTypeItemProvider projectTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.ProjectType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createProjectTypeAdapter()
    {
        if (projectTypeItemProvider == null)
        {
            projectTypeItemProvider = new ProjectTypeItemProvider(this);
        }

        return projectTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.PropertiesType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PropertiesTypeItemProvider propertiesTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.PropertiesType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPropertiesTypeAdapter()
    {
        if (propertiesTypeItemProvider == null)
        {
            propertiesTypeItemProvider = new PropertiesTypeItemProvider(this);
        }

        return propertiesTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.SourceAndTargetModelType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SourceAndTargetModelTypeItemProvider sourceAndTargetModelTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.SourceAndTargetModelType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSourceAndTargetModelTypeAdapter()
    {
        if (sourceAndTargetModelTypeItemProvider == null)
        {
            sourceAndTargetModelTypeItemProvider = new SourceAndTargetModelTypeItemProvider(this);
        }

        return sourceAndTargetModelTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.SourceAndTargetRoleType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SourceAndTargetRoleTypeItemProvider sourceAndTargetRoleTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.SourceAndTargetRoleType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSourceAndTargetRoleTypeAdapter()
    {
        if (sourceAndTargetRoleTypeItemProvider == null)
        {
            sourceAndTargetRoleTypeItemProvider = new SourceAndTargetRoleTypeItemProvider(this);
        }

        return sourceAndTargetRoleTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.SourceAndTargetType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SourceAndTargetTypeItemProvider sourceAndTargetTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.SourceAndTargetType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSourceAndTargetTypeAdapter()
    {
        if (sourceAndTargetTypeItemProvider == null)
        {
            sourceAndTargetTypeItemProvider = new SourceAndTargetTypeItemProvider(this);
        }

        return sourceAndTargetTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.SourceAndTargetTypeType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SourceAndTargetTypeTypeItemProvider sourceAndTargetTypeTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.SourceAndTargetTypeType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSourceAndTargetTypeTypeAdapter()
    {
        if (sourceAndTargetTypeTypeItemProvider == null)
        {
            sourceAndTargetTypeTypeItemProvider = new SourceAndTargetTypeTypeItemProvider(this);
        }

        return sourceAndTargetTypeTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.StereotypeAttributeType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StereotypeAttributeTypeItemProvider stereotypeAttributeTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.StereotypeAttributeType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStereotypeAttributeTypeAdapter()
    {
        if (stereotypeAttributeTypeItemProvider == null)
        {
            stereotypeAttributeTypeItemProvider = new StereotypeAttributeTypeItemProvider(this);
        }

        return stereotypeAttributeTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.StyleexType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StyleexTypeItemProvider styleexTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.StyleexType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStyleexTypeAdapter()
    {
        if (styleexTypeItemProvider == null)
        {
            styleexTypeItemProvider = new StyleexTypeItemProvider(this);
        }

        return styleexTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.TagType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TagTypeItemProvider tagTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.TagType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTagTypeAdapter()
    {
        if (tagTypeItemProvider == null)
        {
            tagTypeItemProvider = new TagTypeItemProvider(this);
        }

        return tagTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.DocumentRoot} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DocumentRootItemProvider documentRootItemProvider;

    /**
     * This creates an adapter for a {@link xmei.DocumentRoot}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDocumentRootAdapter()
    {
        if (documentRootItemProvider == null)
        {
            documentRootItemProvider = new DocumentRootItemProvider(this);
        }

        return documentRootItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.XMIType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected XMITypeItemProvider xmiTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.XMIType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createXMITypeAdapter()
    {
        if (xmiTypeItemProvider == null)
        {
            xmiTypeItemProvider = new XMITypeItemProvider(this);
        }

        return xmiTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link xmei.XrefsType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected XrefsTypeItemProvider xrefsTypeItemProvider;

    /**
     * This creates an adapter for a {@link xmei.XrefsType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createXrefsTypeAdapter()
    {
        if (xrefsTypeItemProvider == null)
        {
            xrefsTypeItemProvider = new XrefsTypeItemProvider(this);
        }

        return xrefsTypeItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory()
    {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
    {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type)
    {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type)
    {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type)
    {
        if (isFactoryForType(type))
        {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
            {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener)
    {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener)
    {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification)
    {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null)
        {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose()
    {
        if (attributeContainmentTypeItemProvider != null) attributeContainmentTypeItemProvider.dispose();
        if (attributeModelTypeItemProvider != null) attributeModelTypeItemProvider.dispose();
        if (attributePropertiesTypeItemProvider != null) attributePropertiesTypeItemProvider.dispose();
        if (attributesTypeItemProvider != null) attributesTypeItemProvider.dispose();
        if (attributeTypeItemProvider != null) attributeTypeItemProvider.dispose();
        if (boundsTypeItemProvider != null) boundsTypeItemProvider.dispose();
        if (codeTypeItemProvider != null) codeTypeItemProvider.dispose();
        if (concreteLinkTypeItemProvider != null) concreteLinkTypeItemProvider.dispose();
        if (connectorAppearanceTypeItemProvider != null) connectorAppearanceTypeItemProvider.dispose();
        if (connectorLabelsTypeItemProvider != null) connectorLabelsTypeItemProvider.dispose();
        if (connectorModelTypeItemProvider != null) connectorModelTypeItemProvider.dispose();
        if (connectorModifiersTypeItemProvider != null) connectorModifiersTypeItemProvider.dispose();
        if (connectorPropertiesTypeItemProvider != null) connectorPropertiesTypeItemProvider.dispose();
        if (connectorsTypeItemProvider != null) connectorsTypeItemProvider.dispose();
        if (connectorTypeItemProvider != null) connectorTypeItemProvider.dispose();
        if (diagramElementsTypeItemProvider != null) diagramElementsTypeItemProvider.dispose();
        if (diagramElementTypeItemProvider != null) diagramElementTypeItemProvider.dispose();
        if (diagramModelTypeItemProvider != null) diagramModelTypeItemProvider.dispose();
        if (diagramPropertiesTypeItemProvider != null) diagramPropertiesTypeItemProvider.dispose();
        if (diagramsTypeItemProvider != null) diagramsTypeItemProvider.dispose();
        if (diagramTypeItemProvider != null) diagramTypeItemProvider.dispose();
        if (documentationItemProvider != null) documentationItemProvider.dispose();
        if (documentationTypeItemProvider != null) documentationTypeItemProvider.dispose();
        if (elementsTypeItemProvider != null) elementsTypeItemProvider.dispose();
        if (elementTypeItemProvider != null) elementTypeItemProvider.dispose();
        if (extendedPropertiesTypeItemProvider != null) extendedPropertiesTypeItemProvider.dispose();
        if (extensionItemProvider != null) extensionItemProvider.dispose();
        if (initialTypeItemProvider != null) initialTypeItemProvider.dispose();
        if (linksTypeItemProvider != null) linksTypeItemProvider.dispose();
        if (modelTypeItemProvider != null) modelTypeItemProvider.dispose();
        if (operationParametersTypeItemProvider != null) operationParametersTypeItemProvider.dispose();
        if (operationPropertiesTypeItemProvider != null) operationPropertiesTypeItemProvider.dispose();
        if (operationsTypeItemProvider != null) operationsTypeItemProvider.dispose();
        if (operationTagsTypeItemProvider != null) operationTagsTypeItemProvider.dispose();
        if (operationTypeItemProvider != null) operationTypeItemProvider.dispose();
        if (operationTypeTypeItemProvider != null) operationTypeTypeItemProvider.dispose();
        if (parameterPropertiesTypeItemProvider != null) parameterPropertiesTypeItemProvider.dispose();
        if (parameterTypeItemProvider != null) parameterTypeItemProvider.dispose();
        if (primitiveTypesTypeItemProvider != null) primitiveTypesTypeItemProvider.dispose();
        if (projectTypeItemProvider != null) projectTypeItemProvider.dispose();
        if (propertiesTypeItemProvider != null) propertiesTypeItemProvider.dispose();
        if (sourceAndTargetModelTypeItemProvider != null) sourceAndTargetModelTypeItemProvider.dispose();
        if (sourceAndTargetRoleTypeItemProvider != null) sourceAndTargetRoleTypeItemProvider.dispose();
        if (sourceAndTargetTypeItemProvider != null) sourceAndTargetTypeItemProvider.dispose();
        if (sourceAndTargetTypeTypeItemProvider != null) sourceAndTargetTypeTypeItemProvider.dispose();
        if (stereotypeAttributeTypeItemProvider != null) stereotypeAttributeTypeItemProvider.dispose();
        if (styleexTypeItemProvider != null) styleexTypeItemProvider.dispose();
        if (tagTypeItemProvider != null) tagTypeItemProvider.dispose();
        if (documentRootItemProvider != null) documentRootItemProvider.dispose();
        if (xmiTypeItemProvider != null) xmiTypeItemProvider.dispose();
        if (xrefsTypeItemProvider != null) xrefsTypeItemProvider.dispose();
    }

}
