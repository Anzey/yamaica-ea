/**
 */
package uml.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import uml.util.UmlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class UmlItemProviderAdapterFactory extends UmlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public UmlItemProviderAdapterFactory()
    {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.DefaultValueType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DefaultValueTypeItemProvider defaultValueTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.DefaultValueType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDefaultValueTypeAdapter()
    {
        if (defaultValueTypeItemProvider == null)
        {
            defaultValueTypeItemProvider = new DefaultValueTypeItemProvider(this);
        }

        return defaultValueTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.DocumentRoot} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected DocumentRootItemProvider documentRootItemProvider;

    /**
     * This creates an adapter for a {@link uml.DocumentRoot}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createDocumentRootAdapter()
    {
        if (documentRootItemProvider == null)
        {
            documentRootItemProvider = new DocumentRootItemProvider(this);
        }

        return documentRootItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.GeneralizationType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected GeneralizationTypeItemProvider generalizationTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.GeneralizationType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createGeneralizationTypeAdapter()
    {
        if (generalizationTypeItemProvider == null)
        {
            generalizationTypeItemProvider = new GeneralizationTypeItemProvider(this);
        }

        return generalizationTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.MemberEndType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MemberEndTypeItemProvider memberEndTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.MemberEndType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMemberEndTypeAdapter()
    {
        if (memberEndTypeItemProvider == null)
        {
            memberEndTypeItemProvider = new MemberEndTypeItemProvider(this);
        }

        return memberEndTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.ModelType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ModelTypeItemProvider modelTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.ModelType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createModelTypeAdapter()
    {
        if (modelTypeItemProvider == null)
        {
            modelTypeItemProvider = new ModelTypeItemProvider(this);
        }

        return modelTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.MultiplicityValueType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected MultiplicityValueTypeItemProvider multiplicityValueTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.MultiplicityValueType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createMultiplicityValueTypeAdapter()
    {
        if (multiplicityValueTypeItemProvider == null)
        {
            multiplicityValueTypeItemProvider = new MultiplicityValueTypeItemProvider(this);
        }

        return multiplicityValueTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.OwnedAttributeBaseType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OwnedAttributeBaseTypeItemProvider ownedAttributeBaseTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.OwnedAttributeBaseType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOwnedAttributeBaseTypeAdapter()
    {
        if (ownedAttributeBaseTypeItemProvider == null)
        {
            ownedAttributeBaseTypeItemProvider = new OwnedAttributeBaseTypeItemProvider(this);
        }

        return ownedAttributeBaseTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.OwnedAttributeExtendedAttributesType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OwnedAttributeExtendedAttributesTypeItemProvider ownedAttributeExtendedAttributesTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.OwnedAttributeExtendedAttributesType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOwnedAttributeExtendedAttributesTypeAdapter()
    {
        if (ownedAttributeExtendedAttributesTypeItemProvider == null)
        {
            ownedAttributeExtendedAttributesTypeItemProvider = new OwnedAttributeExtendedAttributesTypeItemProvider(this);
        }

        return ownedAttributeExtendedAttributesTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.OwnedAttributeExtendedContentType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OwnedAttributeExtendedContentTypeItemProvider ownedAttributeExtendedContentTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.OwnedAttributeExtendedContentType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOwnedAttributeExtendedContentTypeAdapter()
    {
        if (ownedAttributeExtendedContentTypeItemProvider == null)
        {
            ownedAttributeExtendedContentTypeItemProvider = new OwnedAttributeExtendedContentTypeItemProvider(this);
        }

        return ownedAttributeExtendedContentTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.OwnedLiteralType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OwnedLiteralTypeItemProvider ownedLiteralTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.OwnedLiteralType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOwnedLiteralTypeAdapter()
    {
        if (ownedLiteralTypeItemProvider == null)
        {
            ownedLiteralTypeItemProvider = new OwnedLiteralTypeItemProvider(this);
        }

        return ownedLiteralTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.OwnedOperationType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OwnedOperationTypeItemProvider ownedOperationTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.OwnedOperationType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOwnedOperationTypeAdapter()
    {
        if (ownedOperationTypeItemProvider == null)
        {
            ownedOperationTypeItemProvider = new OwnedOperationTypeItemProvider(this);
        }

        return ownedOperationTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.OwnedParameterType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected OwnedParameterTypeItemProvider ownedParameterTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.OwnedParameterType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createOwnedParameterTypeAdapter()
    {
        if (ownedParameterTypeItemProvider == null)
        {
            ownedParameterTypeItemProvider = new OwnedParameterTypeItemProvider(this);
        }

        return ownedParameterTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.PackagedElementAssociationType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PackagedElementAssociationTypeItemProvider packagedElementAssociationTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.PackagedElementAssociationType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPackagedElementAssociationTypeAdapter()
    {
        if (packagedElementAssociationTypeItemProvider == null)
        {
            packagedElementAssociationTypeItemProvider = new PackagedElementAssociationTypeItemProvider(this);
        }

        return packagedElementAssociationTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.PackagedElementBaseType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PackagedElementBaseTypeItemProvider packagedElementBaseTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.PackagedElementBaseType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPackagedElementBaseTypeAdapter()
    {
        if (packagedElementBaseTypeItemProvider == null)
        {
            packagedElementBaseTypeItemProvider = new PackagedElementBaseTypeItemProvider(this);
        }

        return packagedElementBaseTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.PackagedElementInstanceSpecificationType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PackagedElementInstanceSpecificationTypeItemProvider packagedElementInstanceSpecificationTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.PackagedElementInstanceSpecificationType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPackagedElementInstanceSpecificationTypeAdapter()
    {
        if (packagedElementInstanceSpecificationTypeItemProvider == null)
        {
            packagedElementInstanceSpecificationTypeItemProvider = new PackagedElementInstanceSpecificationTypeItemProvider(this);
        }

        return packagedElementInstanceSpecificationTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.PackagedElementPackageType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PackagedElementPackageTypeItemProvider packagedElementPackageTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.PackagedElementPackageType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPackagedElementPackageTypeAdapter()
    {
        if (packagedElementPackageTypeItemProvider == null)
        {
            packagedElementPackageTypeItemProvider = new PackagedElementPackageTypeItemProvider(this);
        }

        return packagedElementPackageTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.PackagedElementRelationType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PackagedElementRelationTypeItemProvider packagedElementRelationTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.PackagedElementRelationType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPackagedElementRelationTypeAdapter()
    {
        if (packagedElementRelationTypeItemProvider == null)
        {
            packagedElementRelationTypeItemProvider = new PackagedElementRelationTypeItemProvider(this);
        }

        return packagedElementRelationTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.PackageImportType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected PackageImportTypeItemProvider packageImportTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.PackageImportType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createPackageImportTypeAdapter()
    {
        if (packageImportTypeItemProvider == null)
        {
            packageImportTypeItemProvider = new PackageImportTypeItemProvider(this);
        }

        return packageImportTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.TypeType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected TypeTypeItemProvider typeTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.TypeType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createTypeTypeAdapter()
    {
        if (typeTypeItemProvider == null)
        {
            typeTypeItemProvider = new TypeTypeItemProvider(this);
        }

        return typeTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.UmlClassType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected UmlClassTypeItemProvider umlClassTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.UmlClassType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUmlClassTypeAdapter()
    {
        if (umlClassTypeItemProvider == null)
        {
            umlClassTypeItemProvider = new UmlClassTypeItemProvider(this);
        }

        return umlClassTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.UmlEnumerationType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected UmlEnumerationTypeItemProvider umlEnumerationTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.UmlEnumerationType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUmlEnumerationTypeAdapter()
    {
        if (umlEnumerationTypeItemProvider == null)
        {
            umlEnumerationTypeItemProvider = new UmlEnumerationTypeItemProvider(this);
        }

        return umlEnumerationTypeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link uml.UmlInterfaceType} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected UmlInterfaceTypeItemProvider umlInterfaceTypeItemProvider;

    /**
     * This creates an adapter for a {@link uml.UmlInterfaceType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createUmlInterfaceTypeAdapter()
    {
        if (umlInterfaceTypeItemProvider == null)
        {
            umlInterfaceTypeItemProvider = new UmlInterfaceTypeItemProvider(this);
        }

        return umlInterfaceTypeItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory()
    {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
    {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type)
    {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type)
    {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type)
    {
        if (isFactoryForType(type))
        {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
            {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener)
    {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener)
    {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification)
    {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null)
        {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose()
    {
        if (defaultValueTypeItemProvider != null) defaultValueTypeItemProvider.dispose();
        if (documentRootItemProvider != null) documentRootItemProvider.dispose();
        if (generalizationTypeItemProvider != null) generalizationTypeItemProvider.dispose();
        if (memberEndTypeItemProvider != null) memberEndTypeItemProvider.dispose();
        if (modelTypeItemProvider != null) modelTypeItemProvider.dispose();
        if (multiplicityValueTypeItemProvider != null) multiplicityValueTypeItemProvider.dispose();
        if (ownedAttributeBaseTypeItemProvider != null) ownedAttributeBaseTypeItemProvider.dispose();
        if (ownedAttributeExtendedAttributesTypeItemProvider != null) ownedAttributeExtendedAttributesTypeItemProvider.dispose();
        if (ownedAttributeExtendedContentTypeItemProvider != null) ownedAttributeExtendedContentTypeItemProvider.dispose();
        if (ownedLiteralTypeItemProvider != null) ownedLiteralTypeItemProvider.dispose();
        if (ownedOperationTypeItemProvider != null) ownedOperationTypeItemProvider.dispose();
        if (ownedParameterTypeItemProvider != null) ownedParameterTypeItemProvider.dispose();
        if (packagedElementAssociationTypeItemProvider != null) packagedElementAssociationTypeItemProvider.dispose();
        if (packagedElementBaseTypeItemProvider != null) packagedElementBaseTypeItemProvider.dispose();
        if (packagedElementInstanceSpecificationTypeItemProvider != null) packagedElementInstanceSpecificationTypeItemProvider.dispose();
        if (packagedElementPackageTypeItemProvider != null) packagedElementPackageTypeItemProvider.dispose();
        if (packagedElementRelationTypeItemProvider != null) packagedElementRelationTypeItemProvider.dispose();
        if (packageImportTypeItemProvider != null) packageImportTypeItemProvider.dispose();
        if (typeTypeItemProvider != null) typeTypeItemProvider.dispose();
        if (umlClassTypeItemProvider != null) umlClassTypeItemProvider.dispose();
        if (umlEnumerationTypeItemProvider != null) umlEnumerationTypeItemProvider.dispose();
        if (umlInterfaceTypeItemProvider != null) umlInterfaceTypeItemProvider.dispose();
    }

}
